generator client {
  provider   = "prisma-client-js"
  output     = "../app/generated/prisma"
  engineType = "binary"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username      String    @unique

  accounts   Account[]
  sessions   Session[]
  userGroups UserGroup[]

  expensesPaid Expense[]     @relation("PaidBy")
  splits       Split[]
  settlements  Settlement[]  @relation("SettledBy")
  received     Settlement[]  @relation("SettledTo")
  activities   ActivityLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  inviteCode  String?       @unique
  userGroups  UserGroup[]
  expenses    Expense[]
  activityLog ActivityLog[]
  settlements Settlement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserGroup {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, groupId])
}

model Expense {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  title  String
  amount Float
  notes  String?

  paidBy   User   @relation("PaidBy", fields: [paidById], references: [id])
  paidById String @db.ObjectId

  group   Group  @relation(fields: [groupId], references: [id])
  groupId String @db.ObjectId

  splits    Split[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Split {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  amount Float

  expense   Expense @relation(fields: [expenseId], references: [id])
  expenseId String  @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model Settlement {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  amount Float
  note   String?

  settledBy   User   @relation("SettledBy", fields: [settledById], references: [id])
  settledById String @db.ObjectId

  settledTo   User   @relation("SettledTo", fields: [settledToId], references: [id])
  settledToId String @db.ObjectId

  group   Group?  @relation(fields: [groupId], references: [id])
  groupId String? @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ActivityLog {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  message String

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  group   Group  @relation(fields: [groupId], references: [id])
  groupId String @db.ObjectId

  createdAt DateTime @default(now())
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
